    if ui.button("load locations").clicked() {
    let mut site_id = 0_u32..;
    let level_id = site_id.next().unwrap();

    let mut levels = BTreeMap::new();

    let mut drawings: BTreeMap<u32, rmf_site_format::Drawing> = BTreeMap::new();
    drawings.insert(
    level_id,
    rmf_site_format::Drawing {
    properties: (rmf_site_format::DrawingProperties {
    name: NameInSite(("june").to_string()),
    source: rmf_site_format::AssetSource::Remote(
    ("/home/ros1/guru/rmf_site/media/testmap.png").to_string(),
    ),
    pose: rmf_site_format::Pose {
    trans: ([-9.6096923828125, -8.197599029541015, 0.0]),
    ..Default::default()
    },
    ..default()
    }),
    ..default()
    },
    );

    let mut anchors = BTreeMap::new();
    // anchors.insert(site_id.next().unwrap(), [0.0, 0.0].into()); //1
    // anchors.insert(site_id.next().unwrap(), [0.0, -1.0].into()); //2

    let resolution = 0.05;
    let map_height = 373.0 * resolution;

    anchors.insert(
    site_id.next().unwrap(),
    [
    (-0.002755206940574878 / resolution),
    (map_height - 0.2878865198422611 / resolution),
    ]
    .into(),
    );

    levels.insert(
    level_id,
    Level {
    properties: rmf_site_format::LevelProperties {
    name: NameInSite("l1".to_string()),
    ..default()
    },
    drawings,
    anchors,
    ..default()
    },
    );

    let mut locations = BTreeMap::new();
    let mut tags = Vec::new();
    tags.push(LocationTag::Charger);

    locations.insert(
    site_id.next().unwrap(),
    Location {
    name: NameInSite("one".to_string()),
    tags: rmf_site_format::LocationTags(tags.clone()),
    graphs: rmf_site_format::AssociatedGraphs::All,
    anchor: rmf_site_format::Point(1),
    },
    );

    let mut graphs = BTreeMap::new();
    graphs.insert(
    site_id.next().unwrap(),
    NavGraph {
    name: NameInSite("navgraph".to_string()),
    ..default()
    },
    );
    let guided = rmf_site_format::Guided {
    graphs,
    locations,
    ..default()
    };

    // create new site and convert to bytes
    let site = rmf_site_format::Site {
    levels,
    navigation: rmf_site_format::Navigation { guided },
    ..default()
    };

    println!("site json data : ->{:?}", site);

    // convert site to bytes
    let site_bytes: Vec<u8> = ron::to_string(&site).unwrap().as_bytes().to_vec();

    _load_workspace.send(LoadWorkspace::Data(WorkspaceData::Site(site_bytes)));
    }
